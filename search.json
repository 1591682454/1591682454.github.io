[{"title":"promise的理解","date":"2021-03-22T08:28:45.000Z","url":"/2021/03/22/promise%E7%9A%84%E7%90%86%E8%A7%A3/","tags":[["javascript","/tags/javascript/"]],"categories":[[" ",""]],"content":"romisepromise1、promise的简单理解promise n. 许诺，允诺；希望 vt. 允诺，许诺；给人以……的指望或希望 vi. 许诺；有指望，有前途 可以理解为promise一定会给你一个承诺，无论是好是坏。 2、async及await async和await是现在异步加载的最好方案。 在es5通常是这样做的 这称之为回调地域，为了避免这种情况promise出现了。 这种调用明显好看了许多。 async和await其实也是promise的语法糖 看一个例子 await 表示这里会停下执行这个函数，只有这个函数执行完才会继续往下执行 如果没有它，我们无法预料两个异步函数谁会先执行完。"},{"title":"git基础使用","date":"2021-03-22T08:04:35.000Z","url":"/2021/03/22/git%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[[" ",""]],"content":"git基础使用1.1 git init初始化 到文件夹目录执行git init 1.2 git add 添加文件 使用git add . 添加所有文件 使用git add index.html 添加index.html这个文件 1.3 git status 查看状态 添加index.html的状态（改变已提交） 修改index.html再看看（改变需提交） 1.4 git commit -m “描述” 提交 git commit -m “第一次提交” 这里已经提交了成功，并创建了mode为100644 1.5 git log 查看全部提交信息 git log 这里已经看到了之前我提交的那次记录，并且记录了提交者和提交时间 1.6 git reset -- hard HEAD^回滚版本首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。 现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令 这里我新增了一个style.css文件并完成了第二次提交 但是我反悔了，因为第二次提交的代码有bug 接下来我想恢复到第一次的版本 这里失败了，windows的cmd必须这样 git reset –hard “HEAD^” 具体原因看看csdn解答 这里显示HEAD is now at 23f2ee4 第一次提交,表示已经回滚到了第一次提交的时候 git log 已经没有了第二次提交的记录，如果我们梅开二度又反悔了怎么办？ 如果你知道commit 的唯一码就好办了，当然只要前几位其他的git会自己去找 例如 第一次提交就是 23f2… ​ 第二次提交就是 302e… git reset –hard 302e03 哎，我又回来了(如果没备份吃commit码建议去网上寻找答案) 1.7 git checkout -- file丢弃工作区的修改命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况： 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次git commit或git add时的状态。 误删的文件也可以用git checkout – file 找回，当然前提是未提交已删除的版本 1.8 git remote add origin 远程仓库地址remote 遥远的 origin 可以自定义代表仓库的名字 例如我的 git remote add res  使用git remote -v查看当前远程仓库地址 使用git branch -a 查看远程仓库地址 1.9 git push -u origin master git push -u res master 推送当前分支版本到名为res的远程仓库 推送结果 然后到gitte看，果然已经推送成功 ps:把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 2.0 git clone 地址 克隆项目clone 克隆 git clone  2.1 git branch dev 创建名为dev的分支 创建分支 dev 切换到分支dev 前面两条命令的合并 2.2 git merge dev 合并名为dev的分支上面我已经创建并切换到了dev分支，在这个分支的操作不会影响master分支 我写了一个js文件并提交到了dev分支 提交成功！！！ 提交dev分支到res远程仓库 然后我发现dev分支确实做的不错，想要合并到master分支 切换到 master分支,合并修改 到这里就已经合并完成了，master分支已经同步过去了，已经是本地commit但git log 并未显示。 git push res master 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 "},{"title":"tags","date":"2021-03-22T07:03:25.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"categories","date":"2021-03-22T07:08:01.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"search","date":"2021-03-22T07:10:34.000Z","url":"/search/index.html","categories":[[" ",""]]},{"title":"友链","date":"2021-03-22T07:10:34.000Z","url":"/friends/index.html","categories":[[" ",""]]},{"title":"page","date":"2021-03-22T08:01:29.000Z","url":"/page/index.html","categories":[[" ",""]]}]